2 Feb 2010: 8.36 PM.

FUNCTIONS
Arrow Functions
ES6 introduced arrow function syntax, a shorter way to write functions by using the special “fat arrow” () => notation.

Arrow functions remove the need to type out the keyword function every time you need to create a function. Instead, you first include the parameters inside the ( ) and then add an arrow => that points to the function body surrounded in { } like this:

const rectangleArea = (width, height) => {
  let area = width * height;
  return area;
};
It’s important to be familiar with the multiple ways of writing functions because you will come across each of these when reading other JavaScript code.


=============================================================

FUNCTIONS
JavaScript also provides several ways to refactor arrow function syntax. 
The most condensed form of the function is known as concise body. 
We’ll explore a few of these techniques below:

1. Functions that take only a single parameter do not need that parameter to be enclosed in parentheses. 
However, if a function takes zero or multiple parameters, parentheses are required.
- showcasing how arrow functions parameters differ for different amounts of parameters
#Zero Parameters
const functionName = () => { };

#One Parameter
const functionName = paramOne => {};

#Two Or More Parameters
const functionName = (paramOne, paramTwo) => {} ;




2. A function body composed of a single-line block does not need curly braces. 
Without the curly braces, whatever that line evaluates will be automatically returned. 
The contents of the block should immediately follow the arrow => 
and the return keyword can be removed. 
This is referred to as implicit return.

- comparing single line and multiline arrow functions
#Single-Line Block:
const sumNumbers = number => number + number;

Multi-Line Block:
const sumNumber = number => {
     const sum = number + number;
     return sum; 
};




So if we have a function:

const squareNum = (num) => {
  return num * num;
};


We can refactor the function to:

const squareNum = num => num * num;


Notice the following changes:

The parentheses around num have been removed, since it has a single parameter.
The curly braces { } have been removed since the function consists of a single-line block.
The return keyword has been removed since the function consists of a single-line block.