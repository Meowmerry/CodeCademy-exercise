10:55 AM 1/7/2020
#Functions as Data

const announceThatIAmDoingImportantWork = () => {
    console.log("I’m doing very important work!");
};

We rename to the short Name:
const busy = announceThatIAmDoingImportantWork;

busy(); // This function call barely takes any space!
**REMEMBER function can be invoked with parentheses()

In JavaScript, functions are first class objects. This means that, like other objects you’ve encountered, JavaScript functions can have properties and methods.


Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function which returns true


#Syntax
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function

new Function ([arg1[, arg2[, ...argN]],] functionBody)
Parameters
arg1, arg2, ... argN
Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier or a list of such strings separated with a comma; for example "x", "theValue", or "a,b".
functionBody
A string containing the JavaScript statements comprising the function definition.
-----------------------------------------------------------------------------------------------

const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
  for(let i = 1; i <= 1000000; i++) {
    if ( (2 + 2) != 4) {
      console.log('Something has gone very wrong :( ');
    }
  }
}

// Write your code below
const is2p2 = checkThatTwoPlusTwoEqualsFourAMillionTimes;
is2p2();
console.log(is2p2.name);
//checkThatTwoPlusTwoEqualsFourAMillionTimes

=====================================================================================
#Functions as Parameters
** We can pass functions (into other functions) as parameters. 
A higher-order function is a function that either accepts functions as parameters, 
returns a function, or both! 

** In JavaScript, functions are first class objects. This means that, like other objects you’ve encountered, JavaScript functions can have properties and methods.


** We call the functions that get passed in as parameters and invoked callback functions 
because they get called during the execution of the higher-order function.

--------------------------------------------------------------------------
const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
  for(let i = 1; i <= 1000000; i++) {
    if ( (2 + 2) != 4) {
      console.log('Something has gone very wrong :( ');
    }
  }
};

const addTwo = num => num + 2;

const timeFuncRuntime = funcParameter => {
  let t1 = Date.now();
  funcParameter();
  let t2 = Date.now();
  return t2 - t1;
};

// Write your code below
const time2p2 = timeFuncRuntime(checkThatTwoPlusTwoEqualsFourAMillionTimes)

const checkConsistentOutput = (func, val) =>{
  let first = func(val);
  let second = func(val);
  
  if( first === second) {
    return first;
  }else { 
   return 'This function returned inconsistent results'

  }
}

checkConsistentOutput(addTwo,10);

--------------------------------------------------------------------------
#HIGHER-ORDER FUNCTIONS
Review
Great job! By thinking about functions as data and learning about higher-order functions, you’ve taken important steps in being able to write clean, modular code and take advantage of JavaScript’s flexibility.

Let’s review what we learned in this lesson:

Abstraction allows us to write complicated code in a way that’s easy to reuse, debug, and understand for human readers

We can work with functions the same way we would any other type of data including reassigning them to new variables

JavaScript functions are first-class objects, so they have properties and methods like any object

Functions can be passed into other functions as parameters

A higher-order function is a function that either accepts functions as parameters, returns a function, or both


















