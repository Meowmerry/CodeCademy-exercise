8:52 AM 12/27/2019
#Scope: 
An important idea in programming is scope. Scope defines where variables can be accessed or referenced. While some variables can be accessed from anywhere within a program, other variables may only be available in a specific context.
==============================
#Blocks and Scope:
A block is the code found inside a set of curly braces {}
Ex: 
----------------------------------
const logSkyColor = () => {
  let color = 'blue'; 
  console.log(color); // blue 
};

----------------------------------
if (dusk) {
  let color = 'pink';
  console.log(color); // pink
};

=================================
#Global Scope:
In global scope, variables are declared outside of blocks. 
Global variables are not bound inside a block, they can be accessed by any code in the program, including code in blocks.

EX:
---------------------------------------------
const color = 'blue'

const returnSkyColor = () => {
  return color; // blue 
};

console.log(returnSkyColor()); //blue
--------------------------------------------
const satellite = 'The Moon'
const galaxy = 'The Milky Way'
const stars = 'North Star'
function callMyNightSky(){
return 'Night Sky: ' + satellite + ', ' + stars + ', and ' + galaxy; 
}
console.log(callMyNightSky())
//Night Sky: The Moon, North Star, and The Milky Way
==========================================================
#Block Scope
A block scope 
When a variable is defined inside a block, it is only accessible to the code within the curly braces {}. We say that variable has block scope because it is only accessible to the lines of code within that block.

Variables that are declared with block scope are known as local variables 

Block scope works like this:
const logSkyColor = () => {
  let color = 'blue'; 
  console.log(color); // blue 
};

logSkyColor(); // blue 
console.log(color); // ReferenceError
===============================================
Scope Pollution:
Scope pollution is when we have too many global variables that exist in the global namespace, or when we reuse variables across different scopes.

EX:
const satellite = 'The Moon';
const galaxy = 'The Milky Way';
let stars = 'North Star';

const callMyNightSky = () => {
  stars = 'Sirius';
  return 'Night Sky: ' + satellite + ', ' + stars + ', ' + galaxy;
};

console.log(callMyNightSky());
console.log(stars);
// The stars will change to 'Sirius'

------------------------------------------------


==================================================
#SCOPE#

Review: Scope
In this lesson, you learned about scope and how it impacts the accessibility of different variables.

Letâ€™s review the following terms:

Scope is the idea in programming that some variables are accessible/inaccessible from other parts of the program.

Blocks are statements that exist within curly braces {}.

Global scope refers to the context within which variables are accessible to every part of the program.

Global variables are variables that exist within global scope.

Block scope refers to the context within which variables that are accessible only within the block they are defined.

Local variables are variables that exist within block scope.

Global namespace is the space in our code that contains globally scoped information.

Scope pollution is when too many variables exist in a namespace or variable names are reused.

As you continue your coding journey, remember to use best practices when declaring your variables! 

Scoping your variables tightly will ensure that your code has clean, organized, and modular logic.

Download the Scope: Cheat Sheet to help you remember the content covered in this lesson.











